

#include "itkMultiResolutionImageRegistrationMethod.h"
#include "itkScaleTransform.h"

#include "itkRegularStepGradientDescentOptimizer.h"
#include "itkImage.h"
#include "itkResampleImageFilter.h"

#include "itkVersion.h"
#include "itkTransformFileReader.h"


#include "Version.h"

#include "../../../include/funzioniIO.h"

const    unsigned int    Dimension = 3;
typedef  short  PixelType;
typedef  short  OutputPixelType;

typedef itk::Image< PixelType, Dimension >  ImageType;

typedef itk::VersorRigid3DTransform< double >  TransformType;
typedef itk::RegularStepGradientDescentOptimizer       OptimizerType;
typedef itk::LinearInterpolateImageFunction<
		ImageType,
		double             > InterpolatorType;

typedef itk::MultiResolutionImageRegistrationMethod<
		ImageType,
		ImageType >   RegistrationType;

typedef itk::MultiResolutionPyramidImageFilter<
		ImageType,
		ImageType >   FixedImagePyramidType;
typedef itk::MultiResolutionPyramidImageFilter<
		ImageType,
		ImageType >   MovingImagePyramidType;

typedef RegistrationType::ParametersType ParametersType;





int main( int argc, char *argv[] )
{


	std::vector<std::string>Vparams;
	Vparams.push_back("program name");
	int T=1;Vparams.push_back("tfm txt");
	int P=T+1;Vparams.push_back("Testing points 3");
	int RP=P+2+1;Vparams.push_back("Real Points 3");


	if( argc < 4 )
	{
		std::cout<<argv[0]<<" ";
		printVersion();
		printParam(Vparams);
		std::cout << "Skip feature\t"<<no<< std::endl;
		std::cout << "Output and input type unsigned char \t"<< std::endl;


		firma();
		return EXIT_FAILURE;
	}



	TransformType::Pointer      transform     = TransformType::New();
	OptimizerType::Pointer      optimizer     = OptimizerType::New();
	InterpolatorType::Pointer   interpolator  = InterpolatorType::New();
	RegistrationType::Pointer   registration  = RegistrationType::New();

	FixedImagePyramidType::Pointer fixedImagePyramid =
			FixedImagePyramidType::New();
	MovingImagePyramidType::Pointer movingImagePyramid =
			MovingImagePyramidType::New();

	registration->SetOptimizer(     optimizer     );
	registration->SetTransform(     transform     );
	registration->SetInterpolator(  interpolator  );

	registration->SetFixedImagePyramid( fixedImagePyramid );
	registration->SetMovingImagePyramid( movingImagePyramid );

	ParametersType Parameters( transform->GetNumberOfParameters() );




#if (ITK_VERSION_MAJOR == 4 && ITK_VERSION_MINOR >= 5) || ITK_VERSION_MAJOR > 4
  itk::TransformFileReaderTemplate<double>::Pointer reader =
    itk::TransformFileReaderTemplate<double>::New();
#else
  itk::TransformFileReader::Pointer reader = itk::TransformFileReader::New();
#endif


  reader->SetFileName(argv[T]);
  reader->Update();
  Parameters= reader->GetTransformList()->begin()->GetPointer()->GetParameters();

	transform->SetParameters(Parameters);

	ImageType::PointType C;
for(int t=0;t<Dimension;t++){C[t]=atof(argv[P+t]);};

TransformType::OutputPointType trackerPointNewPosition;
  trackerPointNewPosition = transform->TransformPoint(C);


  std::cout<<trackerPointNewPosition[0]<<
		  "\t" <<trackerPointNewPosition[1]<<
		  "\t" <<trackerPointNewPosition[2]<<std::endl;



	return EXIT_SUCCESS;
}

